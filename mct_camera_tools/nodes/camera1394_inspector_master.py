#!/usr/bin/env python
from __future__ import print_function
import roslib
roslib.load_manifest('mct_camera_tools')
import rospy
import os
import os.path
import tempfile
import subprocess
from mct_xml_tools.machine import read_machine_file
from mct_xml_tools.launch import create_inspector_launch
from mct_xml_tools.launch import create_inspector_camera_launch
from mct_xml_tools.launch import create_inspector_camera_yaml
from mct_introspection import find_cameras

# Services
from mct_msg_and_srv.srv import CommandString 
from mct_msg_and_srv.srv import CommandStringResponse

class Camera_Inspector_Master(object):
    """
    Launches camera inspector nodes on all computers in the machine file. Launches cameras found 
    on all machines.
    """
    def __init__(self):
        # Get location of machine file
        self.mct_config = os.path.join(os.environ['ROS_LOCAL'], os.environ['MCT_CONFIG'])
        self.machine_file = os.path.join(self.mct_config, 'machine', 'mct.machine')
        self.tmp_dir = tempfile.gettempdir()

        # Get name for autogenerated inspector and camera launch files
        self.inspector_launch_file = os.path.join(self.tmp_dir,'inspector_nodes.launch')
        self.camera_launch_file = os.path.join(self.tmp_dir,'inspector_camera.launch')

        self.inspector_popen = None
        self.camera_popen = None
        self.camera_dict = None
        self.camera_running = False
        rospy.on_shutdown(self.clean_up)
        rospy.init_node('camera1394_inspector_master')
        self.launch_inspector_nodes()

        self.camera_srv = rospy.Service(
                'master_inspector_cameras',
                CommandString,
                self.handle_cameras,
                )

    def run(self):
        rospy.spin()

    def handle_cameras(self,req): 
        """ 
        Hanldes requests to start and stop the cameras found by the inspector
        nodes.  
        """
        response = True
        message = ''
        cmd = req.command
        cmd = cmd.lower()
        if cmd == 'start':
            if not self.camera_running:
                self.launch_camera_nodes()
                self.camera_running = True
            else:
                response = False
                message = 'cameras already running'
        elif cmd == 'stop':
            if self.camera_running:
                self.camera_nodes_clean_up()
                self.camera_running = False
            else:
                response = False
                message = 'cameras not running'
        else:
            response = False
            message = 'unknow command'.format(cmd)

        return CommandStringResponse(response,message)

    def launch_camera_nodes(self):
        """
        Creates the temporary camera yaml and launch files and then launches
        the camera nodes.
        """
        camera_dict = find_cameras()
        camera_dict = create_inspector_camera_yaml(self.tmp_dir,camera_dict)
        create_inspector_camera_launch(self.camera_launch_file,camera_dict)
        self.camera_popen = subprocess.Popen(['roslaunch',self.camera_launch_file])
        self.camera_dict = camera_dict

    def kill_camera_nodes(self):
        """
        Kills all camera nodes by killing the launch process
        """
        if self.camera_popen is not None:
            self.camera_popen.send_signal(subprocess.signal.SIGINT)
            self.camera_popen = None

    def launch_inspector_nodes(self):
        """
        Lauches camera inspector nodes on all computers in the cluster.
        """
        self.create_launch_file()
        self.inspector_popen = subprocess.Popen(['roslaunch', self.inspector_launch_file])

    def kill_inspector_nodes(self):
        """
        Kills all camera inspector nodes by killing the launch process.
        """
        if self.inspector_popen is not None:
            self.inspector_popen.send_signal(subprocess.signal.SIGINT)
            self.inspector_popen = None

    def create_launch_file(self):
        """
        Create temporary launch file for camera inspector nodes.
        """
        # Read machine file
        machine_list = read_machine_file()
        machine_name_list = [m['name'] for m in machine_list]
        create_inspector_launch(self.inspector_launch_file, machine_name_list)

    def delete_inspector_launch_file(self):
        """
        Deletes the temporary launch file for camera inspector nodes.
        """
        if os.path.isfile(self.inspector_launch_file):
            os.remove(self.inspector_launch_file)

    def delete_camera_launch_file(self):
        """
        Deletes the temporary launch and yaml files for the cameras
        """
        if self.camera_dict is not None:
            for guid, info in self.camera_dict.iteritems():
                yaml_file = info['yaml_file']
                if os.path.isfile(yaml_file):
                    os.remove(yaml_file)
        if os.path.isfile(self.camera_launch_file):
            os.remove(self.camera_launch_file)

    def inspector_nodes_clean_up(self):
        """
        Kills inspector nodes and removes temporary launch file.
        """
        self.kill_inspector_nodes()
        self.delete_inspector_launch_file()

    def camera_nodes_clean_up(self):
        """
        Kills camera nodes and removes temporary launch and yaml files.
        """
        self.kill_camera_nodes()
        self.delete_camera_launch_file()

    def clean_up(self):
        """
        Clean up function for node shutdown.
        """
        self.camera_nodes_clean_up()
        self.inspector_nodes_clean_up()

# -----------------------------------------------------------------------------
if __name__ == '__main__':

    node = Camera_Inspector_Master()
    node.run()
